{"version":3,"sources":["github.min.js"],"names":["root","factory","define","amd","Promise","Base64","Utf8","axios","Github","module","exports","require","base64","utf8","this","b64encode","string","encode","polyfill","options","API_URL","apiUrl","_request","method","path","data","cb","raw","getURL","url","indexOf","test","param","hasOwnProperty","encodeURIComponent","replace","window","Date","getTime","config","headers","Accept","Content-Type","username","password","Authorization","token","then","response","request","status","error","_requestAllPages","results","iterate","err","res","xhr","Array","push","apply","next","getResponseHeader","split","filter","link","map","exec","pop","User","repos","params","type","sort","per_page","page","join","orgs","gists","notifications","all","participating","since","constructor","toISOString","before","length","show","command","userRepos","userStarred","userGists","orgRepos","orgname","follow","unfollow","createRepo","Organization","Repository","updateTree","branch","currentTree","sha","that","getRef","repoPath","repo","name","user","fullname","ref","object","createRef","deleteRef","deleteRepo","listTags","listPulls","state","head","base","direction","getPull","number","compare","listBranches","heads","getBlob","getCommit","getSha","pathContent","getStatuses","getTree","tree","postBlob","content","encoding","baseTree","blob","base_tree","mode","postTree","commit","parent","message","userData","author","email","parents","updateHead","contributors","retry","setTimeout","collaborators","isCollaborator","contents","encodeURI","fork","listForks","oldBranch","newBranch","arguments","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","remove","move","newPath","latestCommit","forEach","rootTree","write","writeOptions","committer","undefined","getCommits","until","perpage","isStarred","owner","repository","star","unstar","createRelease","editRelease","getRelease","deleteRelease","Gist","gistPath","create","update","Issue","list","query","key","comment","issue","comments_url","body","edit","get","Search","repositories","code","issues","users","RateLimit","getRateLimit","getIssues","getRepo","getUser","getOrg","getGist","getSearch"],"mappings":"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","file":"github.min.js","sourcesContent":["/*!\r\n * @overview  Github.js\r\n *\r\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\r\n *            Github.js is freely distributable.\r\n *\r\n * @license   Licensed under BSD-3-Clause-Clear\r\n *\r\n *            For all details and documentation:\r\n *            http://substance.io/michael/github\r\n */\r\n'use strict';\r\n\r\n(function (root, factory) {\r\n   /* istanbul ignore next */\r\n   if (typeof define === 'function' && define.amd) {\r\n      define(\r\n         [\r\n            'es6-promise',\r\n            'base-64',\r\n            'utf8',\r\n            'axios'\r\n         ],\r\n         function (Promise, Base64, Utf8, axios) {\r\n            return (root.Github = factory(Promise, Base64, Utf8, axios));\r\n         }\r\n      );\r\n   } else if (typeof module === 'object' && module.exports) {\r\n      module.exports = factory(require('es6-promise'), require('base-64'), require('utf8'), require('axios'));\r\n   } else {\r\n      root.Github = factory(root.Promise, root.base64, root.utf8, root.axios);\r\n   }\r\n}(this, function(Promise, Base64, Utf8, axios) { // jshint ignore:line\r\n   function b64encode(string) {\r\n      return Base64.encode(Utf8.encode(string));\r\n   }\r\n\r\n   if (Promise.polyfill) {\r\n      Promise.polyfill();\r\n   }\r\n\r\n   // Initial Setup\r\n   // -------------\r\n\r\n   var Github = function (options) {\r\n      options = options || {};\r\n\r\n      var API_URL = options.apiUrl || 'https://api.github.com';\r\n\r\n      // HTTP Request Abstraction\r\n      // =======\r\n      //\r\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\r\n\r\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\r\n         function getURL() {\r\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\r\n\r\n            url += ((/\\?/).test(url) ? '&' : '?');\r\n\r\n            if (data && typeof data === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\r\n               for(var param in data) {\r\n                  if (data.hasOwnProperty(param)) {\r\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\r\n                  }\r\n               }\r\n            }\r\n\r\n            return url.replace(/(&timestamp=\\d+)/, '') +\r\n               (typeof window !== 'undefined' ? '&timestamp=' + new Date().getTime() : '');\r\n         }\r\n\r\n         var config = {\r\n            headers: {\r\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\r\n               'Content-Type': 'application/json;charset=UTF-8'\r\n            },\r\n            method: method,\r\n            data: data ? data : {},\r\n            url: getURL()\r\n         };\r\n\r\n         if ((options.token) || (options.username && options.password)) {\r\n            config.headers.Authorization = options.token ?\r\n            'token ' + options.token :\r\n            'Basic ' + b64encode(options.username + ':' + options.password);\r\n         }\r\n\r\n         return axios(config)\r\n            .then(function (response) {\r\n               cb(\r\n                  null,\r\n                  response.data || true,\r\n                  response.request\r\n               );\r\n            }, function (response) {\r\n               if (response.status === 304) {\r\n                  cb(\r\n                     null,\r\n                     response.data || true,\r\n                     response.request\r\n                  );\r\n               } else {\r\n                  cb({\r\n                     path: path,\r\n                     request: response.request,\r\n                     error: response.status\r\n                  });\r\n               }\r\n            });\r\n      };\r\n\r\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, cb) {\r\n         var results = [];\r\n\r\n         (function iterate() {\r\n            _request('GET', path, null, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               if (!(res instanceof Array)) {\r\n                  res = [res];\r\n               }\r\n\r\n               results.push.apply(results, res);\r\n\r\n               var next = (xhr.getResponseHeader('link') || '')\r\n                  .split(',')\r\n                  .filter(function(link) {\r\n                     return /rel=\"next\"/.test(link);\r\n                  })\r\n                  .map(function(link) {\r\n                     return (/<(.*)>/.exec(link) || [])[1];\r\n                  })\r\n                  .pop();\r\n\r\n               if (!next) {\r\n                  cb(err, results, xhr);\r\n               } else {\r\n                  path = next;\r\n                  iterate();\r\n               }\r\n            });\r\n         })();\r\n      };\r\n\r\n      // User API\r\n      // =======\r\n\r\n      Github.User = function () {\r\n         this.repos = function (options, cb) {\r\n            if (typeof options === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            var url = '/user/repos';\r\n            var params = [];\r\n\r\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\r\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\r\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\r\n\r\n            if (options.page) {\r\n               params.push('page=' + encodeURIComponent(options.page));\r\n            }\r\n\r\n            url += '?' + params.join('&');\r\n\r\n            _requestAllPages(url, cb);\r\n         };\r\n\r\n         // List user organizations\r\n         // -------\r\n\r\n         this.orgs = function (cb) {\r\n            _request('GET', '/user/orgs', null, cb);\r\n         };\r\n\r\n         // List authenticated user's gists\r\n         // -------\r\n\r\n         this.gists = function (cb) {\r\n            _request('GET', '/gists', null, cb);\r\n         };\r\n\r\n         // List authenticated user's unread notifications\r\n         // -------\r\n\r\n         this.notifications = function (options, cb) {\r\n            if (typeof options === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            options = options || {};\r\n            var url = '/notifications';\r\n            var params = [];\r\n\r\n            if (options.all) {\r\n               params.push('all=true');\r\n            }\r\n\r\n            if (options.participating) {\r\n               params.push('participating=true');\r\n            }\r\n\r\n            if (options.since) {\r\n               var since = options.since;\r\n\r\n               if (since.constructor === Date) {\r\n                  since = since.toISOString();\r\n               }\r\n\r\n               params.push('since=' + encodeURIComponent(since));\r\n            }\r\n\r\n            if (options.before) {\r\n               var before = options.before;\r\n\r\n               if (before.constructor === Date) {\r\n                  before = before.toISOString();\r\n               }\r\n\r\n               params.push('before=' + encodeURIComponent(before));\r\n            }\r\n\r\n            if (options.page) {\r\n               params.push('page=' + encodeURIComponent(options.page));\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n\r\n         // Show user information\r\n         // -------\r\n\r\n         this.show = function (username, cb) {\r\n            var command = username ? '/users/' + username : '/user';\r\n\r\n            _request('GET', command, null, cb);\r\n         };\r\n\r\n         // List user repositories\r\n         // -------\r\n\r\n         this.userRepos = function (username, options, cb) {\r\n            if (typeof options === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            var url = '/users/' + username + '/repos';\r\n            var params = [];\r\n\r\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\r\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\r\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\r\n\r\n            if (options.page) {\r\n               params.push('page=' + encodeURIComponent(options.page));\r\n            }\r\n\r\n            url += '?' + params.join('&');\r\n\r\n            _requestAllPages(url, cb);\r\n         };\r\n\r\n         // List user starred repositories\r\n         // -------\r\n\r\n         this.userStarred = function (username, cb) {\r\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\r\n            _requestAllPages('/users/' + username + '/starred?type=all&per_page=100', cb);\r\n         };\r\n\r\n         // List a user's gists\r\n         // -------\r\n\r\n         this.userGists = function (username, cb) {\r\n            _request('GET', '/users/' + username + '/gists', null, cb);\r\n         };\r\n\r\n         // List organization repositories\r\n         // -------\r\n\r\n         this.orgRepos = function (orgname, cb) {\r\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\r\n            _requestAllPages('/orgs/' + orgname + '/repos?type=all&&page_num=1000&sort=updated&direction=desc', cb);\r\n         };\r\n\r\n         // Follow user\r\n         // -------\r\n\r\n         this.follow = function (username, cb) {\r\n            _request('PUT', '/user/following/' + username, null, cb);\r\n         };\r\n\r\n         // Unfollow user\r\n         // -------\r\n\r\n         this.unfollow = function (username, cb) {\r\n            _request('DELETE', '/user/following/' + username, null, cb);\r\n         };\r\n\r\n         // Create a repo\r\n         // -------\r\n         this.createRepo = function (options, cb) {\r\n            _request('POST', '/user/repos', options, cb);\r\n         };\r\n      };\r\n\r\n      Github.Organization = function () {\r\n         // Create an Organization repo\r\n         // -------\r\n         this.createRepo = function (options, cb) {\r\n            _request('POST', '/orgs/' + options.orgname + '/repos', options, cb);\r\n         };\r\n      };\r\n\r\n      // Repository API\r\n      // =======\r\n\r\n      Github.Repository = function (options) {\r\n         var repo = options.name;\r\n         var user = options.user;\r\n         var fullname = options.fullname;\r\n\r\n         var that = this;\r\n         var repoPath;\r\n\r\n         if (fullname) {\r\n            repoPath = '/repos/' + fullname;\r\n         } else {\r\n            repoPath = '/repos/' + user + '/' + repo;\r\n         }\r\n\r\n         var currentTree = {\r\n            branch: null,\r\n            sha: null\r\n         };\r\n\r\n         // Uses the cache if branch has not been changed\r\n         // -------\r\n\r\n         function updateTree(branch, cb) {\r\n            if (branch === currentTree.branch && currentTree.sha) {\r\n               return cb(null, currentTree.sha);\r\n            }\r\n\r\n            that.getRef('heads/' + branch, function (err, sha) {\r\n               currentTree.branch = branch;\r\n               currentTree.sha = sha;\r\n               cb(err, sha);\r\n            });\r\n         }\r\n\r\n         // Get a particular reference\r\n         // -------\r\n\r\n         this.getRef = function (ref, cb) {\r\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.object.sha, xhr);\r\n            });\r\n         };\r\n\r\n         // Create a new reference\r\n         // --------\r\n         //\r\n         // {\r\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\r\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\r\n         // }\r\n\r\n         this.createRef = function (options, cb) {\r\n            _request('POST', repoPath + '/git/refs', options, cb);\r\n         };\r\n\r\n         // Delete a reference\r\n         // --------\r\n         //\r\n         // Repo.deleteRef('heads/gh-pages')\r\n         // repo.deleteRef('tags/v1.0')\r\n\r\n         this.deleteRef = function (ref, cb) {\r\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, cb);\r\n         };\r\n\r\n         // Delete a repo\r\n         // --------\r\n\r\n         this.deleteRepo = function (cb) {\r\n            _request('DELETE', repoPath, options, cb);\r\n         };\r\n\r\n         // List all tags of a repository\r\n         // -------\r\n\r\n         this.listTags = function (cb) {\r\n            _request('GET', repoPath + '/tags', null, cb);\r\n         };\r\n\r\n         // List all pull requests of a respository\r\n         // -------\r\n\r\n         this.listPulls = function (options, cb) {\r\n            options = options || {};\r\n            var url = repoPath + '/pulls';\r\n            var params = [];\r\n\r\n            if (typeof options === 'string') {\r\n               // Backward compatibility\r\n               params.push('state=' + options);\r\n            } else {\r\n               if (options.state) {\r\n                  params.push('state=' + encodeURIComponent(options.state));\r\n               }\r\n\r\n               if (options.head) {\r\n                  params.push('head=' + encodeURIComponent(options.head));\r\n               }\r\n\r\n               if (options.base) {\r\n                  params.push('base=' + encodeURIComponent(options.base));\r\n               }\r\n\r\n               if (options.sort) {\r\n                  params.push('sort=' + encodeURIComponent(options.sort));\r\n               }\r\n\r\n               if (options.direction) {\r\n                  params.push('direction=' + encodeURIComponent(options.direction));\r\n               }\r\n\r\n               if (options.page) {\r\n                  params.push('page=' + options.page);\r\n               }\r\n\r\n               if (options.per_page) {\r\n                  params.push('per_page=' + options.per_page);\r\n               }\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n\r\n         // Gets details for a specific pull request\r\n         // -------\r\n\r\n         this.getPull = function (number, cb) {\r\n            _request('GET', repoPath + '/pulls/' + number, null, cb);\r\n         };\r\n\r\n         // Retrieve the changes made between base and head\r\n         // -------\r\n\r\n         this.compare = function (base, head, cb) {\r\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, cb);\r\n         };\r\n\r\n         // List all branches of a repository\r\n         // -------\r\n\r\n         this.listBranches = function (cb) {\r\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               heads = heads.map(function (head) {\r\n                  return head.ref.replace(/^refs\\/heads\\//, '');\r\n               });\r\n\r\n               cb(null, heads, xhr);\r\n            });\r\n         };\r\n\r\n         // Retrieve the contents of a blob\r\n         // -------\r\n\r\n         this.getBlob = function (sha, cb) {\r\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\r\n         };\r\n\r\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\r\n         // -------\r\n\r\n         this.getCommit = function (branch, sha, cb) {\r\n            _request('GET', repoPath + '/git/commits/' + sha, null, cb);\r\n         };\r\n\r\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\r\n         // -------\r\n\r\n         this.getSha = function (branch, path, cb) {\r\n            if (!path || path === '') {\r\n               return that.getRef('heads/' + branch, cb);\r\n            }\r\n\r\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''),\r\n               null, function (err, pathContent, xhr) {\r\n                  if (err) {\r\n                     return cb(err);\r\n                  }\r\n\r\n                  cb(null, pathContent.sha, xhr);\r\n               });\r\n         };\r\n\r\n         // Get the statuses for a particular SHA\r\n         // -------\r\n\r\n         this.getStatuses = function (sha, cb) {\r\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\r\n         };\r\n\r\n         // Retrieve the tree a commit points to\r\n         // -------\r\n\r\n         this.getTree = function (tree, cb) {\r\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.tree, xhr);\r\n            });\r\n         };\r\n\r\n         // Post a new blob object, getting a blob SHA back\r\n         // -------\r\n\r\n         this.postBlob = function (content, cb) {\r\n            if (typeof content === 'string') {\r\n               content = {\r\n                  content: content,\r\n                  encoding: 'utf-8'\r\n               };\r\n            } else {\r\n               content = {\r\n                  content: b64encode(content),\r\n                  encoding: 'base64'\r\n               };\r\n            }\r\n\r\n            _request('POST', repoPath + '/git/blobs', content, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.sha, xhr);\r\n            });\r\n         };\r\n\r\n         // Update an existing tree adding a new blob object getting a tree SHA back\r\n         // -------\r\n\r\n         this.updateTree = function (baseTree, path, blob, cb) {\r\n            var data = {\r\n               base_tree: baseTree,\r\n               tree: [\r\n                  {\r\n                     path: path,\r\n                     mode: '100644',\r\n                     type: 'blob',\r\n                     sha: blob\r\n                  }\r\n               ]\r\n            };\r\n\r\n            _request('POST', repoPath + '/git/trees', data, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.sha, xhr);\r\n            });\r\n         };\r\n\r\n         // Post a new tree object having a file path pointer replaced\r\n         // with a new blob SHA getting a tree SHA back\r\n         // -------\r\n\r\n         this.postTree = function (tree, cb) {\r\n            _request('POST', repoPath + '/git/trees', {\r\n               tree: tree\r\n            }, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.sha, xhr);\r\n            });\r\n         };\r\n\r\n         // Create a new commit object with the current commit SHA as the parent\r\n         // and the new tree SHA, getting a commit SHA back\r\n         // -------\r\n\r\n         this.commit = function (parent, tree, message, cb) {\r\n            var user = new Github.User();\r\n\r\n            user.show(null, function (err, userData) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               var data = {\r\n                  message: message,\r\n                  author: {\r\n                     name: options.user,\r\n                     email: userData.email\r\n                  },\r\n                  parents: [\r\n                     parent\r\n                  ],\r\n                  tree: tree\r\n               };\r\n\r\n               _request('POST', repoPath + '/git/commits', data, function (err, res, xhr) {\r\n                  if (err) {\r\n                     return cb(err);\r\n                  }\r\n\r\n                  currentTree.sha = res.sha; // Update latest commit\r\n\r\n                  cb(null, res.sha, xhr);\r\n               });\r\n            });\r\n         };\r\n\r\n         // Update the reference of your head to point to the new commit SHA\r\n         // -------\r\n\r\n         this.updateHead = function (head, commit, cb) {\r\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\r\n               sha: commit\r\n            }, cb);\r\n         };\r\n\r\n         // Show repository information\r\n         // -------\r\n\r\n         this.show = function (cb) {\r\n            _request('GET', repoPath, null, cb);\r\n         };\r\n\r\n         // Show repository contributors\r\n         // -------\r\n\r\n         this.contributors = function (cb, retry) {\r\n            retry = retry || 1000;\r\n            var that = this;\r\n\r\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               if (xhr.status === 202) {\r\n                  setTimeout(\r\n                     function () {\r\n                        that.contributors(cb, retry);\r\n                     },\r\n                     retry\r\n                  );\r\n               } else {\r\n                  cb(err, data, xhr);\r\n               }\r\n            });\r\n         };\r\n\r\n         // Show repository collaborators\r\n         // -------\r\n\r\n         this.collaborators = function (cb) {\r\n            _request('GET', repoPath + '/collaborators', null, cb);\r\n         };\r\n\r\n         // Check whether user is a collaborator on the repository\r\n         // -------\r\n\r\n         this.isCollaborator = function (username, cb) {\r\n            _request('GET', repoPath + '/collaborators/' + username, null, cb);\r\n         };\r\n\r\n         // Get contents\r\n         // --------\r\n\r\n         this.contents = function (ref, path, cb) {\r\n            path = encodeURI(path);\r\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\r\n               ref: ref\r\n            }, cb);\r\n         };\r\n\r\n         // Fork repository\r\n         // -------\r\n\r\n         this.fork = function (cb) {\r\n            _request('POST', repoPath + '/forks', null, cb);\r\n         };\r\n\r\n         // List forks\r\n         // --------\r\n\r\n         this.listForks = function (cb) {\r\n            _request('GET', repoPath + '/forks', null, cb);\r\n         };\r\n\r\n         // Branch repository\r\n         // --------\r\n\r\n         this.branch = function (oldBranch, newBranch, cb) {\r\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\r\n               cb = newBranch;\r\n               newBranch = oldBranch;\r\n               oldBranch = 'master';\r\n            }\r\n\r\n            this.getRef('heads/' + oldBranch, function (err, ref) {\r\n               if (err && cb) {\r\n                  return cb(err);\r\n               }\r\n\r\n               that.createRef({\r\n                  ref: 'refs/heads/' + newBranch,\r\n                  sha: ref\r\n               }, cb);\r\n            });\r\n         };\r\n\r\n         // Create pull request\r\n         // --------\r\n\r\n         this.createPullRequest = function (options, cb) {\r\n            _request('POST', repoPath + '/pulls', options, cb);\r\n         };\r\n\r\n         // List hooks\r\n         // --------\r\n\r\n         this.listHooks = function (cb) {\r\n            _request('GET', repoPath + '/hooks', null, cb);\r\n         };\r\n\r\n         // Get a hook\r\n         // --------\r\n\r\n         this.getHook = function (id, cb) {\r\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\r\n         };\r\n\r\n         // Create a hook\r\n         // --------\r\n\r\n         this.createHook = function (options, cb) {\r\n            _request('POST', repoPath + '/hooks', options, cb);\r\n         };\r\n\r\n         // Edit a hook\r\n         // --------\r\n\r\n         this.editHook = function (id, options, cb) {\r\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\r\n         };\r\n\r\n         // Delete a hook\r\n         // --------\r\n\r\n         this.deleteHook = function (id, cb) {\r\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\r\n         };\r\n\r\n         // Read file at given path\r\n         // -------\r\n\r\n         this.read = function (branch, path, cb) {\r\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''),\r\n               null, cb, true);\r\n         };\r\n\r\n         // Remove a file\r\n         // -------\r\n\r\n         this.remove = function (branch, path, cb) {\r\n            that.getSha(branch, path, function (err, sha) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               _request('DELETE', repoPath + '/contents/' + path, {\r\n                  message: path + ' is removed',\r\n                  sha: sha,\r\n                  branch: branch\r\n               }, cb);\r\n            });\r\n         };\r\n\r\n         // Alias for repo.remove for backwards comapt.\r\n         // -------\r\n         this.delete = this.remove;\r\n\r\n         // Move a file to a new location\r\n         // -------\r\n\r\n         this.move = function (branch, path, newPath, cb) {\r\n            updateTree(branch, function (err, latestCommit) {\r\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\r\n                  // Update Tree\r\n                  tree.forEach(function (ref) {\r\n                     if (ref.path === path) {\r\n                        ref.path = newPath;\r\n                     }\r\n\r\n                     if (ref.type === 'tree') {\r\n                        delete ref.sha;\r\n                     }\r\n                  });\r\n\r\n                  that.postTree(tree, function (err, rootTree) {\r\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\r\n                        that.updateHead(branch, commit, cb);\r\n                     });\r\n                  });\r\n               });\r\n            });\r\n         };\r\n\r\n         // Write file contents to a given branch and path\r\n         // -------\r\n\r\n         this.write = function (branch, path, content, message, options, cb) {\r\n            if (typeof options === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            that.getSha(branch, encodeURI(path), function (err, sha) {\r\n               var writeOptions = {\r\n                  message: message,\r\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\r\n                  branch: branch,\r\n                  committer: options && options.committer ? options.committer : undefined,\r\n                  author: options && options.author ? options.author : undefined\r\n               };\r\n\r\n               // If no error, we set the sha to overwrite an existing file\r\n               if (!(err && err.error !== 404)) {\r\n                  writeOptions.sha = sha;\r\n               }\r\n\r\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\r\n            });\r\n         };\r\n\r\n         // List commits on a repository. Takes an object of optional parameters:\r\n         // sha: SHA or branch to start listing commits from\r\n         // path: Only commits containing this file path will be returned\r\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\r\n         // since: ISO 8601 date - only commits after this date will be returned\r\n         // until: ISO 8601 date - only commits before this date will be returned\r\n         // -------\r\n\r\n         this.getCommits = function (options, cb) {\r\n            options = options || {};\r\n            var url = repoPath + '/commits';\r\n            var params = [];\r\n\r\n            if (options.sha) {\r\n               params.push('sha=' + encodeURIComponent(options.sha));\r\n            }\r\n\r\n            if (options.path) {\r\n               params.push('path=' + encodeURIComponent(options.path));\r\n            }\r\n\r\n            if (options.author) {\r\n               params.push('author=' + encodeURIComponent(options.author));\r\n            }\r\n\r\n            if (options.since) {\r\n               var since = options.since;\r\n\r\n               if (since.constructor === Date) {\r\n                  since = since.toISOString();\r\n               }\r\n\r\n               params.push('since=' + encodeURIComponent(since));\r\n            }\r\n\r\n            if (options.until) {\r\n               var until = options.until;\r\n\r\n               if (until.constructor === Date) {\r\n                  until = until.toISOString();\r\n               }\r\n\r\n               params.push('until=' + encodeURIComponent(until));\r\n            }\r\n\r\n            if (options.page) {\r\n               params.push('page=' + options.page);\r\n            }\r\n\r\n            if (options.perpage) {\r\n               params.push('per_page=' + options.perpage);\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n\r\n         // Check if a repository is starred.\r\n         // --------\r\n\r\n         this.isStarred = function(owner, repository, cb) {\r\n            _request('GET', '/user/starred/' + owner + '/' + repository, null, cb);\r\n         };\r\n\r\n         // Star a repository.\r\n         // --------\r\n\r\n         this.star = function(owner, repository, cb) {\r\n            _request('PUT', '/user/starred/' + owner + '/' + repository, null, cb);\r\n         };\r\n\r\n         // Unstar a repository.\r\n         // --------\r\n\r\n         this.unstar = function(owner, repository, cb) {\r\n            _request('DELETE', '/user/starred/' + owner + '/' + repository, null, cb);\r\n         };\r\n\r\n         // Create a new release\r\n         // --------\r\n\r\n         this.createRelease = function(options, cb) {\r\n            _request('POST', repoPath + '/releases', options, cb);\r\n         };\r\n\r\n         // Edit a release\r\n         // --------\r\n\r\n         this.editRelease = function(id, options, cb) {\r\n            _request('PATCH', repoPath + '/releases/' + id, options, cb);\r\n         };\r\n\r\n         // Get a single release\r\n         // --------\r\n\r\n         this.getRelease = function(id, cb) {\r\n            _request('GET', repoPath + '/releases/' + id, null, cb);\r\n         };\r\n\r\n         // Remove a release\r\n         // --------\r\n\r\n         this.deleteRelease = function(id, cb) {\r\n            _request('DELETE', repoPath + '/releases/' + id, null, cb);\r\n         };\r\n      };\r\n\r\n      // Gists API\r\n      // =======\r\n\r\n      Github.Gist = function (options) {\r\n         var id = options.id;\r\n         var gistPath = '/gists/' + id;\r\n\r\n         // Read the gist\r\n         // --------\r\n\r\n         this.read = function (cb) {\r\n            _request('GET', gistPath, null, cb);\r\n         };\r\n\r\n         // Create the gist\r\n         // --------\r\n         // {\r\n         //  \"description\": \"the description for this gist\",\r\n         //    \"public\": true,\r\n         //    \"files\": {\r\n         //      \"file1.txt\": {\r\n         //        \"content\": \"String file contents\"\r\n         //      }\r\n         //    }\r\n         // }\r\n\r\n         this.create = function (options, cb) {\r\n            _request('POST', '/gists', options, cb);\r\n         };\r\n\r\n         // Delete the gist\r\n         // --------\r\n\r\n         this.delete = function (cb) {\r\n            _request('DELETE', gistPath, null, cb);\r\n         };\r\n\r\n         // Fork a gist\r\n         // --------\r\n\r\n         this.fork = function (cb) {\r\n            _request('POST', gistPath + '/fork', null, cb);\r\n         };\r\n\r\n         // Update a gist with the new stuff\r\n         // --------\r\n\r\n         this.update = function (options, cb) {\r\n            _request('PATCH', gistPath, options, cb);\r\n         };\r\n\r\n         // Star a gist\r\n         // --------\r\n\r\n         this.star = function (cb) {\r\n            _request('PUT', gistPath + '/star', null, cb);\r\n         };\r\n\r\n         // Untar a gist\r\n         // --------\r\n\r\n         this.unstar = function (cb) {\r\n            _request('DELETE', gistPath + '/star', null, cb);\r\n         };\r\n\r\n         // Check if a gist is starred\r\n         // --------\r\n\r\n         this.isStarred = function (cb) {\r\n            _request('GET', gistPath + '/star', null, cb);\r\n         };\r\n      };\r\n\r\n      // Issues API\r\n      // ==========\r\n\r\n      Github.Issue = function (options) {\r\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\r\n\r\n         this.create = function(options, cb) {\r\n            _request('POST', path, options, cb);\r\n         };\r\n\r\n         this.list = function (options, cb) {\r\n            var query = [];\r\n\r\n            for(var key in options) {\r\n               if (options.hasOwnProperty(key)) {\r\n                  query.push(encodeURIComponent(key) + '=' + encodeURIComponent(options[key]));\r\n               }\r\n            }\r\n\r\n            _requestAllPages(path + '?' + query.join('&'), cb);\r\n         };\r\n\r\n         this.comment = function (issue, comment, cb) {\r\n            _request('POST', issue.comments_url, {\r\n               body: comment\r\n            }, cb);\r\n         };\r\n\r\n         this.edit = function (issue, options, cb) {\r\n            _request('PATCH', path + '/' + issue, options, cb);\r\n         };\r\n\r\n         this.get = function (issue, cb) {\r\n            _request('GET', path + '/' + issue, null, cb);\r\n         };\r\n      };\r\n\r\n      // Search API\r\n      // ==========\r\n\r\n      Github.Search = function (options) {\r\n         var path = '/search/';\r\n         var query = '?q=' + options.query;\r\n\r\n         this.repositories = function (options, cb) {\r\n            _request('GET', path + 'repositories' + query, options, cb);\r\n         };\r\n\r\n         this.code = function (options, cb) {\r\n            _request('GET', path + 'code' + query, options, cb);\r\n         };\r\n\r\n         this.issues = function (options, cb) {\r\n            _request('GET', path + 'issues' + query, options, cb);\r\n         };\r\n\r\n         this.users = function (options, cb) {\r\n            _request('GET', path + 'users' + query, options, cb);\r\n         };\r\n      };\r\n\r\n      // Rate Limit API\r\n      // ==========\r\n\r\n      Github.RateLimit = function() {\r\n         this.getRateLimit = function(cb) {\r\n            _request('GET', '/rate_limit', null, cb);\r\n         };\r\n      };\r\n\r\n      return Github;\r\n   };\r\n\r\n   // Top Level API\r\n   // -------\r\n\r\n   Github.getIssues = function (user, repo) {\r\n      return new Github.Issue({\r\n         user: user,\r\n         repo: repo\r\n      });\r\n   };\r\n\r\n   Github.getRepo = function (user, repo) {\r\n      if (!repo) {\r\n         return new Github.Repository({\r\n            fullname: user\r\n         });\r\n      } else {\r\n         return new Github.Repository({\r\n            user: user,\r\n            name: repo\r\n         });\r\n      }\r\n   };\r\n\r\n   Github.getUser = function () {\r\n      return new Github.User();\r\n   };\r\n\r\n   Github.getOrg = function () {\r\n      return new Github.Organization();\r\n   };\r\n\r\n   Github.getGist = function (id) {\r\n      return new Github.Gist({\r\n         id: id\r\n      });\r\n   };\r\n\r\n   Github.getSearch = function (query) {\r\n      return new Github.Search({\r\n         query: query\r\n      });\r\n   };\r\n\r\n   Github.getRateLimit = function() {\r\n      return new Github.RateLimit();\r\n   };\r\n\r\n   return Github;\r\n}));\r\n"],"sourceRoot":"/source/"}